/**
 * @license
 * Copyright 2022-2023 Project CHIP Authors
 * SPDX-License-Identifier: Apache-2.0
 */

import { InternalError } from "../../../common/MatterError.js";
import { Transaction } from "./Transaction.js";

/**
 * PersistenceParticipant is a transaction participant that updates key/value
 * storage.
 */
export abstract class PersistenceParticipant implements Transaction.Participant {
    #finished = false;
    #transaction: Transaction;

    abstract description: string;

    constructor(transaction: Transaction) {
        this.#transaction = transaction;
    }

    async set(key: string, value: unknown) {
        if (this.#finished) {
            throw new InternalError("Set invoked on finished participant");
        }
        this.#transaction.addParticipant(this);

        this.doSet(key, value);
    }

    async commit1() {
        // No phase one commit as logs should be generated by doSet()
    }

    async commit2() {
        if (this.#finished) {
            throw new InternalError("Commit2 invoked on finished participant");
        }

        this.#finished = true;

        await this.doCommit2();
    }

    async rollback() {
        if (this.#finished) {
            throw new InternalError("Rollback invoked on finished participant");
        }

        await this.doRollback();
    }

    /**
     * First commit phase.
     */
    protected abstract doSet(key: string, value: unknown): Promise<void>;

    /**
     * Rollback of first phase.
     */
    protected abstract doRollback(): Promise<void>;

    /**
     * Second commit phase.
     */
    protected abstract doCommit2(): Promise<void>;
}
